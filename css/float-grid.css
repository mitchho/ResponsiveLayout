* {
  /* this guarantees any explicit width settings
     will take up no more than that width. Always
     use this with these type grids. */
  box-sizing: border-box;
}

/* Grid measurements:
 *
 *   960px wide including 12 gutters (half gutters on both edges)
 *
 *   60px columns (12)
 *   20px gutters (two half-gutters + 11 full gutters, so 12 total)
 *
 *
 *   For smaller screens, we always want 20px of padding on either side,
 *   so 960 + 20 + 20 => 1000px
 *
 **/

/*   We are calling this class on the div element, which is by
     default a block level element. This means each div.row
     should keep to its own horizontal line.
*/
.row {
  max-width: 1000px;
  padding-left: 20px;
  padding-right: 20px;
  margin: 0 auto;
}

/* The first ruleset forces the height of each
   row to expand to the height of its tallest 
   child element. That means that rows will vertically 
   contain all their content.
*/
.row::before,
.row::after {
  display: table;
  content: '';
}

/*  The second ruleset, with "clear: both;", is a 
    clearfix, and it ensures that any content that 
    comes after the row will act as though the preceding 
    row was in the normal flow, instead of butting up 
    against the top of the row container.
*/
.row::after {
  clear: both;
}

/*  We're saying that all columns should float to the 
    left, displaying side by side as long as there's 
    enough space in their parent container. Regardless 
    of its individual width (that is, a 3-wide vs. a 6-wide 
    column), each column gets a constant, percentage based 
    left and right padding, which gives the gutter behavior 
    we specified in the design section above (and note that 
    the way we implement the 2.08% gutter discussed above is 
    by splitting it in half on the left and right).
*/
.col-4, .col-12 {
  float: left;

  /* Gutters:
   * Each column is padded by half-a-gutter on each side,
   *
   * Half a gutter is 10px, 10/960 (context) = 1.041666%
   *
   */
  padding-left: 1.04166666%;
  padding-right: 1.04166666%;
}

/* Mobile defaults: this specifies that by default, columns
   will take up 100% of their parent's width, which accomplishes 
   the stacking behavior for columns at narrow viewport widths.
*/
.col-4, .col-12 {
  width: 100%;
}


/* Non-mobile grid: finally, we have a media query that overrides
   our default styling for column widths on screens that are 640px 
   and wider. When the viewport is wider than 640px, a 3-width 
   column should take up 25% of its parent row element's width. 
   Since we're using box-styling: border-box;, that width value is 
   inclusive of the percentage based padding we saw in the earlier 
   ruleset for left and right padding on column classes.
*/
@media only screen and (min-width: 640px) {
  /* 4 columns, 4/12 in % */
  .col-4 {
    width: 33%;
  }

  /* 12 columns, 12/12 in % */
  .col-12 {
    width: 100%;
  }
   
}
